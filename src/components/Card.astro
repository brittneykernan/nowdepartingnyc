---
import CardContent from "./CardContent.astro";

interface Props {
	height: number;
	href: string;
	title: string;
  transitionName: string;
	image: {
    alt: string;
    src: ImageMetadata;
  }
  hideTitle?: boolean;
  comingSoon?: boolean;
  responsive?: boolean;
}

const { comingSoon = false, height, hideTitle = false, href, image, title, transitionName, responsive } = Astro.props;
const contentProps = {
  comingSoon,
  image,
  height,
  transitionName,
  hideTitle,
  title,
  responsive
}

console.log(href)

---
{ comingSoon ? 
  <div class:list={[{ 'coming-soon': comingSoon } ]}>
    <div class="coming-soon-badge">Coming Soon</div>
    <CardContent {...contentProps} />
  </div>
:
  <a href={href} transition:name={`${transitionName}-card`} class="card-link">
    <CardContent  {...contentProps} />
  </a>
}

<style>
  .coming-soon {
    position: relative;
  }
  .coming-soon-badge {
    opacity: 0;
    position: absolute;
    z-index: 1;
    transition: opacity 0.5s;
    border-radius: 100%;
    background: pink;
    width: 100px;
    height: 100px;
    right: var(--space-m);
    top: var(--space-m);
    text-align: center;
    display: flex;
    align-items: center;
    line-height: 23px;
    rotate: 15deg;
  }
  .coming-soon:hover .coming-soon-badge {
    opacity: 1;
  }
	.card-link {
		text-decoration: none;
  	perspective: 25px;
		display: block;
	}
</style>

<script>
(function() {
  // Init
  var container = document.querySelector("li").firstChild,
    inner = document.querySelector("li a img");

  // Mouse
  var mouse = {
    _x: 0,
    _y: 0,
    x: 0,
    y: 0,
    updatePosition: function(event) {
      var e = event || window.event;
      this.x = e.clientX - this._x;
      this.y = (e.clientY - this._y) * -1;
    },
    setOrigin: function(e) {
      this._x = e.offsetLeft + Math.floor(e.offsetWidth / 2);
      this._y = e.offsetTop + Math.floor(e.offsetHeight / 2);
    },
    show: function() {
      return "(" + this.x + ", " + this.y + ")";
    }
  };

  // Track the mouse position relative to the center of the container.
  mouse.setOrigin(container);

  //-----------------------------------------

  var counter = 0;
  var updateRate = 10;
  var isTimeToUpdate = function() {
    return counter++ % updateRate === 0;
  };

  //-----------------------------------------

  var onMouseEnterHandler = function(event) {
    update(event);
  };

  var onMouseLeaveHandler = function() {
    inner.style = "";
  };

  var onMouseMoveHandler = function(event) {
    if (isTimeToUpdate()) {
      update(event);
    }
  };

  //-----------------------------------------

  var update = function(event) {
    mouse.updatePosition(event);
    updateTransformStyle(
      (mouse.y / inner.offsetHeight / 2).toFixed(2),
      (mouse.x / inner.offsetWidth / 2).toFixed(2)
    );
  };

  var updateTransformStyle = function(x, y) {
    var style = "rotateX(" + x + "deg) rotateY(" + y + "deg)";
    inner.style.transform = style;
    // inner.style.webkitTransform = style;
    // inner.style.mozTransform = style;
    // inner.style.msTransform = style;
    // inner.style.oTransform = style;
  };

  //-----------------------------------------

  container.onmouseenter = onMouseEnterHandler;
  container.onmouseleave = onMouseLeaveHandler;
  container.onmousemove = onMouseMoveHandler;
})();
</script>
