---
import { Image } from "astro:assets";

interface Props {
	height: number;
	href: string;
	title: string;
	image: {
    alt: string;
    src: ImageMetadata;
    url: string;
    artistName: string;
  }
}

const { height, href, image : { alt, src, artistName, url}, title } = Astro.props;

---
<a href={href} transition:name="card">
	<Image src={src} height={height} alt={alt} transition:name="image" />
	<h3 transition:name="title">{title}</h3>
</a>
{ artistName && url &&
  <small>Photo by <a href={url} rel="nofollow noreferrer noopener">{artistName}</a></small>
}
<style>
	a {
		text-decoration: none;
  		perspective: 25px;
		display: block;
	}
	h3 {
		font-weight: 100;
		margin-top: 1rem;
		font-size: 3rem;
		line-height: 1;
		display: inline-block;
	}
	img {
		height: 50vh;
		width: auto;
		display: block;
		box-shadow: 1.5rem 1rem 2rem rgba(0, 0, 0, 0.25);
		transition: transform 0.5s;
		-webkit-transition: transform 0.5s;
		-moz-transition: transform 0.5s;
		-o-transition: transform 0.5s;
	}
</style>

<script>
(function() {
  // Init
  var container = document.querySelector("li").firstChild,
    inner = document.querySelector("li a img");

  // Mouse
  var mouse = {
    _x: 0,
    _y: 0,
    x: 0,
    y: 0,
    updatePosition: function(event) {
      var e = event || window.event;
      this.x = e.clientX - this._x;
      this.y = (e.clientY - this._y) * -1;
    },
    setOrigin: function(e) {
      this._x = e.offsetLeft + Math.floor(e.offsetWidth / 2);
      this._y = e.offsetTop + Math.floor(e.offsetHeight / 2);
    },
    show: function() {
      return "(" + this.x + ", " + this.y + ")";
    }
  };

  // Track the mouse position relative to the center of the container.
  mouse.setOrigin(container);

  //-----------------------------------------

  var counter = 0;
  var updateRate = 10;
  var isTimeToUpdate = function() {
    return counter++ % updateRate === 0;
  };

  //-----------------------------------------

  var onMouseEnterHandler = function(event) {
    update(event);
  };

  var onMouseLeaveHandler = function() {
    inner.style = "";
  };

  var onMouseMoveHandler = function(event) {
    if (isTimeToUpdate()) {
      update(event);
    }
  };

  //-----------------------------------------

  var update = function(event) {
    mouse.updatePosition(event);
    updateTransformStyle(
      (mouse.y / inner.offsetHeight / 2).toFixed(2),
      (mouse.x / inner.offsetWidth / 2).toFixed(2)
    );
  };

  var updateTransformStyle = function(x, y) {
    var style = "rotateX(" + x + "deg) rotateY(" + y + "deg)";
    inner.style.transform = style;
    // inner.style.webkitTransform = style;
    // inner.style.mozTransform = style;
    // inner.style.msTransform = style;
    // inner.style.oTransform = style;
  };

  //-----------------------------------------

  container.onmouseenter = onMouseEnterHandler;
  container.onmouseleave = onMouseLeaveHandler;
  container.onmousemove = onMouseMoveHandler;
})();
</script>
